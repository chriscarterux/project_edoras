name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: project-edoras
  DOCKER_IMAGE_TAG: ${{ github.sha }}
  CONTAINER_NAME: project-edoras-app

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }} .
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }} ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Save Docker image
        run: |
          docker save ${{ env.DOCKER_IMAGE_NAME }}:latest | gzip > docker-image.tar.gz

      - name: Deploy to Hostinger VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -e
            
            # Create deployment directory
            mkdir -p /opt/project-edoras
            cd /opt/project-edoras
            
            # Backup current deployment
            if [ -f docker-compose.yml ]; then
              echo "Creating backup of current deployment..."
              cp docker-compose.yml docker-compose.yml.backup
              docker compose ps --format json > running-containers.backup.json || true
            fi
            
            # Stop current containers gracefully
            if [ -f docker-compose.yml ]; then
              echo "Stopping current containers..."
              docker compose down --timeout 30 || true
            fi

      - name: Copy deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          source: "docker-image.tar.gz,docker-compose.yml,.env.production"
          target: "/opt/project-edoras/"

      - name: Load and start new deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -e
            cd /opt/project-edoras
            
            # Load new Docker image
            echo "Loading new Docker image..."
            docker load < docker-image.tar.gz
            rm docker-image.tar.gz
            
            # Create production environment file
            if [ -f .env.production ]; then
              cp .env.production .env
            fi
            
            # Start new deployment
            echo "Starting new deployment..."
            docker compose up -d
            
            # Wait for containers to be healthy
            echo "Waiting for containers to be healthy..."
            sleep 10
            
            # Check if deployment is successful
            if ! docker compose ps | grep -q "Up"; then
              echo "Deployment failed! Rolling back..."
              docker compose down || true
              
              if [ -f docker-compose.yml.backup ]; then
                mv docker-compose.yml.backup docker-compose.yml
                docker compose up -d
                echo "Rollback completed"
                exit 1
              fi
            fi
            
            # Clean up old images
            echo "Cleaning up old Docker images..."
            docker image prune -f --filter "until=24h" || true
            
            # Verify deployment
            sleep 5
            if docker compose ps | grep -q "Up"; then
              echo "Deployment successful!"
              # Remove backup files after successful deployment
              rm -f docker-compose.yml.backup running-containers.backup.json
            else
              echo "Deployment verification failed!"
              exit 1
            fi

  health-check:
    name: Post-deployment Health Check
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Wait for application startup
        run: sleep 30

      - name: Check application health
        run: |
          # Check if the application is responding
          for i in {1..5}; do
            if curl -f -s http://${{ secrets.VPS_HOST }} > /dev/null; then
              echo "Application is healthy!"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          done
          echo "Health check failed after 5 attempts"
          exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment completed successfully!"
          else
            echo "❌ Deployment failed or health check failed!"
          fi