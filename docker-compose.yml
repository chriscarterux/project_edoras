version: '3.8'

services:
  # Main application
  app:
    image: project-edoras:latest
    container_name: project-edoras-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.edoras.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.routers.edoras.entrypoints=websecure"
      - "traefik.http.routers.edoras.tls.certresolver=letsencrypt"
      - "traefik.http.services.edoras.loadbalancer.server.port=3000"

  # Nginx reverse proxy (fallback if not using Traefik)
  nginx:
    image: nginx:alpine
    container_name: project-edoras-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - nginx-proxy

  # Traefik reverse proxy (recommended)
  traefik:
    image: traefik:v3.0
    container_name: project-edoras-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-letsencrypt:/letsencrypt
    networks:
      - app-network
    environment:
      - TRAEFIK_API_DASHBOARD=true
    profiles:
      - traefik-proxy

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: project-edoras-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    profiles:
      - with-redis

  # Log aggregation
  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: project-edoras-logs
    restart: unless-stopped
    volumes:
      - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - nginx-logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    depends_on:
      - app
    networks:
      - app-network
    profiles:
      - with-logging

networks:
  app-network:
    driver: bridge

volumes:
  traefik-letsencrypt:
    driver: local
  redis-data:
    driver: local
  nginx-logs:
    driver: local